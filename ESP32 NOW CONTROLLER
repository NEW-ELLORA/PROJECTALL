____________________________________MAC ADDESS FINDER ________________________________

// Simple Diagnostic Receiver - robust across ESP32 Arduino cores
// Prints MAC (WiFi.macAddress + esp_wifi_get_mac) and reports esp_now init/send results.

#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <esp_wifi.h>

// Broadcast address
uint8_t broadcastAddress[6] = { 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF };
const char BEACON_MSG[] = "DIAG_BEACON";

void printHexMac(const uint8_t *mac) {
  for (int i = 0; i < 6; ++i) {
    if (mac[i] < 16) Serial.print('0');
    Serial.print(mac[i], HEX);
    if (i < 5) Serial.print(':');
  }
}

// onSent callback: only prints overall status (safe)
void onSent(const wifi_tx_info_t *info, esp_now_send_status_t status) {
  Serial.print("[onSent] status=");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "OK" : "FAIL");
  (void)info; // don't access fields that may not exist on some cores
}

// onRecv callback: prints source MAC and payload length
void onRecv(const esp_now_recv_info_t *info, const uint8_t *data, int len) {
  Serial.print("[onRecv] from ");
  if (info && info->src_addr) printHexMac(info->src_addr);
  Serial.print(" len=");
  Serial.println(len);
  // print first bytes (safe, do not assume structure)
  if (len > 0) {
    Serial.print(" data[0..min(7,len-1)]: ");
    for (int i = 0; i < len && i < 8; ++i) {
      if (data[i] < 16) Serial.print('0');
      Serial.print(data[i], HEX);
      Serial.print(' ');
    }
    Serial.println();
  }
}

void setup() {
  Serial.begin(115200);
  delay(150);
  Serial.println("\n=== SIMPLE DIAGNOSTIC ===");

  // Ensure WiFi STA mode
  WiFi.mode(WIFI_STA);
  WiFi.disconnect(true, true);
  delay(50);

  // 1) WiFi.macAddress()
  String macStr = WiFi.macAddress();
  Serial.print("WiFi.macAddress(): ");
  Serial.println(macStr);

  // 2) esp_wifi_get_mac()
  uint8_t macBuf[6] = {0};
  esp_err_t e = esp_wifi_get_mac(WIFI_IF_STA, macBuf);
  Serial.print("esp_wifi_get_mac(WIFI_IF_STA) -> esp_err: ");
  Serial.println((int)e);
  Serial.print("esp_wifi_get_mac MAC: ");
  printHexMac(macBuf);
  Serial.println();

  // Check "all zero" quickly
  bool macAllZero = true;
  for (int i = 0; i < 6; ++i) if (macBuf[i] != 0) macAllZero = false;
  Serial.print("esp_wifi_get_mac all-zero? ");
  Serial.println(macAllZero ? "YES" : "NO");

  // 3) Init ESP-NOW and register callbacks
  esp_err_t en = esp_now_init();
  Serial.print("esp_now_init() -> ");
  Serial.println(en == ESP_OK ? "OK" : String("ERR ") + String((int)en));

  esp_now_register_send_cb(onSent);
  esp_now_register_recv_cb(onRecv);

  // 4) Try one broadcast send and report result
  esp_err_t sres = esp_now_send(broadcastAddress, (uint8_t*)BEACON_MSG, sizeof(BEACON_MSG));
  Serial.print("esp_now_send(broadcast) -> ");
  Serial.println(sres == ESP_OK ? "OK" : String("ERR ") + String((int)sres));

  Serial.println("\n=== DIAGNOSTIC DONE ===");
  Serial.println("If MAC is all-zero or esp_now_init failed:");
  Serial.println(" - Ensure Tools->Board matches your module (ESP32 Dev Module or specific variant).");
  Serial.println(" - Try a full power-cycle (unplug USB / battery) and re-flash.");
  Serial.println(" - If still failing, update the 'esp32' platform in Boards Manager to the latest stable.");
}

void loop() {
  delay(1000);
}
____________________________________________________________________________________________________________________________

_______________________________________________receiver code ______________________________________________

#include <esp_now.h>
#include <WiFi.h>

// Motor A connections
const uint8_t A_RPWM = 32;
const uint8_t A_LPWM = 33;
const uint8_t A_R_EN  = 26;
const uint8_t A_L_EN  = 25;

// Motor B connections
const uint8_t B_RPWM = 12;
const uint8_t B_LPWM = 13;
const uint8_t B_R_EN  = 14;
const uint8_t B_L_EN  = 27;

// Structure to receive data (must match sender)
typedef struct struct_message {
  int command;
} struct_message;

struct_message myData;

// Callback when data is received â€” updated signature
void OnDataRecv(const esp_now_recv_info_t *info, const uint8_t *incomingData, int len) {
  // optional: print sender MAC
  Serial.print("From MAC: ");
  for (int i = 0; i < 6; i++) {
    if (info->src_addr[i] < 0x10) Serial.print("0");
    Serial.print(info->src_addr[i], HEX);
    if (i < 5) Serial.print(":");
  }
  Serial.println();

  // safety: check size before memcpy
  if (len == sizeof(myData)) {
    memcpy(&myData, incomingData, len);
    Serial.print("Command received: ");
    Serial.println(myData.command);
  } else {
    Serial.print("Unexpected data length: ");
    Serial.println(len);
  }
}

void setup() {
  Serial.begin(115200);

  // Station mode for ESP-NOW
  WiFi.mode(WIFI_STA);
  delay(100);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register receive callback
  esp_now_register_recv_cb(OnDataRecv);

  // Motor pins
  pinMode(A_RPWM, OUTPUT);
  pinMode(A_LPWM, OUTPUT);
  pinMode(A_R_EN, OUTPUT);
  pinMode(A_L_EN, OUTPUT);
  pinMode(B_RPWM, OUTPUT);
  pinMode(B_LPWM, OUTPUT);
  pinMode(B_R_EN, OUTPUT);
  pinMode(B_L_EN, OUTPUT);

  // Start with motors disabled/stopped
  digitalWrite(A_RPWM, LOW);
  digitalWrite(A_LPWM, LOW);
  digitalWrite(B_RPWM, LOW);
  digitalWrite(B_LPWM, LOW);

  // Enable motors (verify active-high on your driver)
  digitalWrite(A_R_EN, HIGH);
  digitalWrite(A_L_EN, HIGH);
  digitalWrite(B_R_EN, HIGH);
  digitalWrite(B_L_EN, HIGH);
}

void loop() {
  switch (myData.command) {
    case 1: // Forward (all motors anticlockwise)
      digitalWrite(A_LPWM, HIGH);
      digitalWrite(A_RPWM, LOW);
      digitalWrite(B_LPWM, HIGH);
      digitalWrite(B_RPWM, LOW);
      break;
    case 2: // Backward (all motors clockwise)
      digitalWrite(A_LPWM, LOW);
      digitalWrite(A_RPWM, HIGH);
      digitalWrite(B_LPWM, LOW);
      digitalWrite(B_RPWM, HIGH);
      break;
    case 3: // Right (left motor anticlockwise, right motor clockwise)
      digitalWrite(A_LPWM, HIGH);
      digitalWrite(A_RPWM, LOW);
      digitalWrite(B_LPWM, LOW);
      digitalWrite(B_RPWM, HIGH);
      break;
    case 4: // Left (left motor clockwise, right motor anticlockwise)
      digitalWrite(A_LPWM, LOW);
      digitalWrite(A_RPWM, HIGH);
      digitalWrite(B_LPWM, HIGH);
      digitalWrite(B_RPWM, LOW);
      break;
    default: // Stop
      digitalWrite(A_LPWM, LOW);
      digitalWrite(A_RPWM, LOW);
      digitalWrite(B_LPWM, LOW);
      digitalWrite(B_RPWM, LOW);
      break;
  }

  // small delay to avoid busy-loop printing jitter
  delay(20);
}

__________________________________________________________________________________________________________________________

__________________________________ Transmitter code____________________________________________________________________

#include <esp_now.h>
#include <WiFi.h>

// Replace with the MAC address of your receiver ESP32
uint8_t broadcastAddress[] = {0x98, 0xF4, 0xAB, 0x09, 0x61, 0xB4};

// Define the joystick pins
const int VRX_PIN = 34;
const int VRY_PIN = 35;
const int SW_PIN  = 32;

// Structure to send data (must match receiver)
typedef struct struct_message {
  int command;
} struct_message;

// Create a struct_message called myData
struct_message myData;

esp_now_peer_info_t peerInfo;

// New-style callback expected by newer ESP32 cores/IDF
void OnDataSent(const wifi_tx_info_t *info, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
  // Avoid depending on fields in wifi_tx_info_t unless you inspect your core headers.
}

void setup() {
  Serial.begin(115200);

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register send callback (matches new signature)
  esp_now_register_send_cb(OnDataSent);

  // Register peer
  memset(&peerInfo, 0, sizeof(peerInfo));
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;    // use current WiFi channel
  peerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  pinMode(VRX_PIN, INPUT);
  pinMode(VRY_PIN, INPUT);
  pinMode(SW_PIN, INPUT_PULLUP);

  Serial.println("Setup complete");
}

void loop() {
  int xValue = analogRead(VRX_PIN);
  int yValue = analogRead(VRY_PIN);
  int swValue = digitalRead(SW_PIN);

  // Diagnostic prints
  Serial.print("X Value: ");
  Serial.print(xValue);
  Serial.print(" | Y Value: ");
  Serial.print(yValue);

  // Deadband for the joystick to prevent drift (ESP32 ADC is 0-4095)
  if (yValue < 1000) {
    myData.command = 1; // Forward
  } else if (yValue > 3000) {
    myData.command = 2; // Backward
  } else if (xValue > 3000) {
    myData.command = 3; // Right
  } else if (xValue < 1000) {
    myData.command = 4; // Left
  } else {
    myData.command = 0; // Stop
  }

  Serial.print(" | Command Sent: ");
  Serial.println(myData.command);

  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&myData, sizeof(myData));

  if (result != ESP_OK) {
    Serial.print("Error sending the data: ");
    Serial.println(result);
  }

  delay(200);
}






